{"meta":{"title":"Paul code","subtitle":"这里只有代码相关，要了解更多 >>> jibaole.com","description":"这里是 jibaole.com 一部分","author":"Paul","url":"http://www.jibaole.top"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2018-07-14T12:14:03.587Z","updated":"2018-07-14T12:14:03.587Z","comments":false,"path":"/404.html","permalink":"http://www.jibaole.top//404.html","excerpt":"","text":".article-title { font-size: 2.1em; } strong a { color: #747474; } .player { margin-left: -10px; } .sign { text-align: right; font-style: italic; } .share, #page-visit, .visit span:nth-child(2), .pic br { display: none; } .center { text-align: center; height: 2.5em; font-weight: bold; } .search2 { height: 2.2em; font-size: 1em; width: 50%; margin: auto 24%; color: #727272; opacity: .6; border: 2px solid lightgray; } .search2:hover { opacity: 1; box-shadow: 0 0 10px rgba(0, 0, 0, 0.3) }; .article-entry hr { margin: 0; } .pic { text-align: center; margin: 0; } 回主页 · 所有文章 · 留言板 很抱歉，您所访问的地址并不存在: 可在边栏搜索框中对本站进行检索，以获取相关信息。"},{"title":"关于我","date":"2016-11-26T09:07:58.000Z","updated":"2018-06-28T07:20:42.785Z","comments":true,"path":"about/index.html","permalink":"http://www.jibaole.top/about/index.html","excerpt":"","text":"简介123本号主要由 本人 独立维护，毕业于:南阳理工学院,软件学院，专业：计算机应用技术(Java方向),一直从事于互联网相关行业。出于对行业的憧憬、对技术的热爱，促使我好奇心，喜欢研究新技术、未止折腾。 初衷123自娱自乐,记录平时点滴、细碎,也许会有错误，也许并不完美，但这不就是成长的过程么。没什么宏伟的目标，只希望每天都能有所收获，add more ing into my life……有句话说得好：\"好记性不如烂笔头\",感谢大家关注！ 其它平台 CSDN： http://blog.csdn.net/jibaole 码云：https://gitee.com/jibaole.com github：https://github.com/jibaole 联系方式:jibaole@foxmail.com"},{"title":"优秀电子书","date":"2017-11-09T10:35:14.000Z","updated":"2018-06-28T07:20:42.785Z","comments":true,"path":"books/index.html","permalink":"http://www.jibaole.top/books/index.html","excerpt":"","text":"国外程序员在 stackoverflow 推荐的程序员必读书籍，中文版。 stackoverflow 上的程序员应该阅读的非编程类书籍有哪些？ 中文版 github 上的一个流行的编程书籍索引 中文版 目录 语言无关类 版本控制 编辑器 NoSQL MySQL 管理和监控 项目相关 Web 大数据 编程艺术 其它 版本控制 Git教程 （本文由 廖雪峰 创作，如果觉得本教程对您有帮助，可以去 iTunes 购买） git - 简易指南 猴子都能懂的GIT入门 Git 参考手册 Pro Git Pro Git 中文版 (整理在gitbook上) Git Magic GotGitHub Git权威指南 Git Community Book 中文版 Mercurial 使用教程 HgInit (中文版) 沉浸式学 Git Git-Cheat-Sheet （感谢 @flyhigher139 翻译了中文版） GitHub秘籍 GitHub帮助文档 git-flow 备忘清单 svn 手册 GitHub漫游指南 编辑器 exvim–vim 改良成IDE项目 笨方法学Vimscript 中译本 Vim中文文档 所需即所获：像 IDE 一样使用 vim Atom飞行手册中文版 Markdown·简单的世界 一年成为 Emacs 高手 Emacs 生存指南 Atom官方手册 NoSQL NoSQL数据库笔谈 Redis 设计与实现 Redis 命令参考 带有详细注释的 Redis 3.0 代码 带有详细注释的 Redis 2.6 代码 The Little MongoDB Book The Little Redis Book Neo4j 简体中文手册 v1.8 Neo4j .rb 中文資源 Disque 使用教程 Apache Spark 设计与实现 MySQL MySQL索引背后的数据结构及算法原理 21分钟MySQL入门教程 管理和监控 ELKstack 中文指南 Mastering Elasticsearch(中文版) ElasticSearch 权威指南 Elasticsearch 权威指南（中文版） Logstash 最佳实践 Puppet 2.7 Cookbook 中文版 项目相关 持续集成（第二版） (译言网) 让开发自动化系列专栏 追求代码质量 selenium 中文文档 Selenium Webdriver 简易教程 Joel谈软件) 約耳談軟體(Joel on Software) Gradle 2 用户指南 Gradle 中文使用文档 编码规范 开源软件架构 GNU make 指南 GNU make 中文手册 The Twelve-Factor App Web 关于浏览器和网络的 20 项须知 浏览器开发工具的秘密 Chrome 开发者工具中文手册 Chrome扩展开发文档 Grunt中文文档 gulp中文文档 Gulp 入门指南 移动Web前端知识库 正则表达式30分钟入门教程 前端开发体系建设日记 移动前端开发收藏夹 JSON风格指南 HTTP 接口设计指北 前端资源分享（一） 前端资源分享（二） 前端代码规范 及 最佳实践 前端开发者手册 前端工程师手册 w3school教程整理 Wireshark用户手册 一站式学习Wireshark HTTP 下午茶 HTTP/2.0 中文翻译 RFC 7540 - HTTP/2 中文翻译版 http2讲解 3 Web Designs in 3 Weeks 站点可靠性工程 Java Apache Shiro 用户指南 Jersey 2.x 用户指南 Spring Framework 4.x参考文档 Spring Boot参考指南 (翻译中) MyBatis中文文档 MyBatis Generator 中文文档 用jersey构建REST服务 Activiti 5.x 用户指南 Google Java编程风格指南 Netty 4.x 用户指南 Netty 实战(精髓) REST 实战 Java 编码规范 Apache MINA 2 用户指南 H2 Database 教程 Java Servlet 3.1 规范 JSSE 参考指南 Java开源实现及最佳实践 Java 编程要点 Think Java Java 8 简明教程 JavaScript Google JavaScript 代码风格指南 Google JSON 风格指南 Airbnb JavaScript 规范 JavaScript 标准参考教程（alpha） Javascript编程指南 (源码) javascript 的 12 个怪癖 JavaScript 秘密花园 JavaScript核心概念及实践 (PDF) (此书已由人民邮电出版社出版发行，但作者依然免费提供PDF版本，希望开发者们去购买，支持作者) 《JavaScript 模式》 “JavaScript patterns”中译本 命名函数表达式探秘 (注:原文由为之漫笔翻译，原始地址无法打开，所以此处地址为我博客上的备份) 学用 JavaScript 设计模式 (开源中国) 深入理解JavaScript系列 ECMAScript 5.1 中文版 ECMAScript 6 入门 (作者：阮一峰) JavaScript Promise迷你书 You-Dont-Know-JS (深入JavaScript语言核心机制的系列图书) JavaScript 教程 廖雪峰 MDN JavaScript 中文文档 jQuery jQuery 解构 简单易懂的JQuery魔法 How to write jQuery plugin You Don’t Need jQuery 如何实现一个类jQuery？ Node.js Node入门 七天学会NodeJS Nodejs Wiki Book (繁体中文) express.js 中文文档 koa 中文文档 一起学koa 使用 Express + MongoDB 搭建多人博客 Express框架 Node.js 包教不包会 Learn You The Node.js For Much Win! (中文版) Node debug 三法三例 nodejs中文文档 orm2 中文文档 underscore.js Underscore.js中文文档 backbone.js backbone.js中文文档 backbone.js入门教程 (PDF) Backbone.js入门教程第二版 Developing Backbone.js Applications(中文版) AngularJS AngularJS最佳实践和风格指南 AngularJS中译本 AngularJS入门教程 构建自己的AngularJS 在Windows环境下用Yeoman构建AngularJS项目 Zepto.js Zepto.js 中文文档 Sea.js Hello Sea.js React.js React.js 中文文档 React webpack-cookbook React 入门教程 React Native 中文文档(含最新Android内容) Learn React &amp; Webpack by building the Hacker News front page impress.js impress.js的中文教程 CoffeeScript CoffeeScript Cookbook The Little Book on CoffeeScript中文版 CoffeeScript 编码风格指南 TypeScipt TypeScript Handbook ExtJS Ext4.1.0 中文文档 Meteor Discover Meteor Meteor 中文文档 Angular-Meteor 中文教程 Chrome扩展及应用开发 Python 廖雪峰 Python 2.7 中文教程 廖雪峰 Python 3 中文教程 简明Python教程 零基础学 Python 第一版 零基础学 Python 第二版 可爱的 Python Python 2.7 官方教程中文版 Python 3.3 官方教程中文版 Python Cookbook 中文版 Python3 Cookbook 中文版 深入 Python 深入 Python 3 PEP8 Python代码风格规范 Google Python 风格指南 中文版 Python入门教程 (PDF) 笨办法学 Python (PDF EPUB) Python自然语言处理中文版 （感谢陈涛同学的翻译，也谢谢 @shwley 联系了作者） Python 绘图库 matplotlib 官方指南中文翻译 Scrapy 0.25 文档 ThinkPython ThinkPython 2ed Python快速教程 Python 正则表达式操作指南 python初级教程：入门详解 Twisted 与异步编程入门 TextGrocery 中文 API ( 基于svm算法的一个短文本分类 Python 库 ) Requests: HTTP for Humans Pillow 中文文档 PyMOTW 中文版 Python 官方文档中文版 Fabric 中文文档 Beautiful Soup 4.2.0 中文文档 用Python做科学计算 Sphinx 中文文档 精通 Python 设计模式 python 安全编程教程 程序设计思想与方法 知乎周刊·编程小白学Python Scipy 讲义 Python 学习笔记 基础篇 Python 学习笔记 模块篇 Python 标准库 中文版 Python进阶 Python 核心编程 第二版 CPyUG译 Python最佳实践指南 Python 精要教程 Python 量化交易教程 Django Django 1.5 文档中文版 正在翻译中 Diango 1.7 文档中文版 正在翻译中，目前只翻译了目录 Django 1.8.2 文档中文版正在翻译中 Django 最佳实践 Django搭建简易博客教程 The Django Book 中文版 Django 设计模式与最佳实践 Django 网站开发 Cookbook Django Girls 學習指南 Flask Flask 文档中文版 Jinja2 文档中文版 Werkzeug 文档中文版 Flask之旅 Flask 扩展文档汇总 Flask 大型教程 SQLAlchemy 中文文档 web.py web.py 0.3 新手指南 Web.py Cookbook 简体中文版 Tornado Introduction to Tornado 中文翻译 Tornado源码解析 Tornado 4.3 文档中文版 R R语言忍者秘笈 Ruby Ruby 风格指南 Rails 风格指南 笨方法學 Ruby Ruby on Rails 指南 Ruby on Rails 實戰聖經 Ruby on Rails Tutorial 原书第 3 版 (本书网页版免费提供，电子版以 PDF、EPub 和 Mobi 格式提供购买，仅售 9.9 美元) Rails 实践 Rails 5 开发进阶(Beta) Rails 102 编写Ruby的C拓展 Ruby 源码解读 Ruby中的元编程 Rust rust book 中文翻译 rust primer Scala Scala课堂 (Twitter的Scala中文教程) Effective Scala(Twitter的Scala最佳实践的中文翻译) Scala指南 Shell Shell脚本编程30分钟入门 Bash脚本15分钟进阶教程 Linux工具快速教程 shell十三问 Shell编程范例 Swift The Swift Programming Language 中文版 Swift 语言指南 Stanford 公开课，Developing iOS 8 Apps with Swift 字幕翻译文件 C4iOS - COSMOS 读书笔记及其它 编译原理（紫龙书）中文第2版习题答案 把《编程珠玑》读薄 Effective C++读书笔记 Golang 学习笔记、Python 学习笔记、C 学习笔记 (PDF) Jsoup 学习笔记 学习笔记: Vim、Python、memcached 图灵开放书翻译计划–C++、Python、Java等 蒂姆·奥莱利随笔 （由译言网翻译，电子版免费） SICP 解题集 精彩博客集合 中文文案排版指北 Standard C 语言标准函数库速查 (Cheat Sheet) Git Cheatsheet Chs GitBook简明教程 JavaScript语言精粹 制造开源软件 提问的智慧 Markdown 入门参考 AsciiDoc简明指南 背包问题九讲 老齐的技术资料 前端技能汇总 借助开源项目，学习软件开发 前端工作面试问题 leetcode/lintcode题解/算法学习笔记 前端开发笔记本 测试相关 移动APP自动化测试优秀框架Appium API Reference V1.2.0 CN"},{"title":"分类","date":"2018-06-28T07:20:42.786Z","updated":"2018-06-28T07:20:42.786Z","comments":true,"path":"categories/index.html","permalink":"http://www.jibaole.top/categories/index.html","excerpt":"","text":""},{"title":"网址收藏夹","date":"2018-01-09T10:34:28.000Z","updated":"2018-06-28T07:20:42.786Z","comments":true,"path":"favorites/index.html","permalink":"http://www.jibaole.top/favorites/index.html","excerpt":"","text":"搜索 谷歌:https://www.google.com 百度:http://www.baidu.com 必应:https://cn.bing.com/ 技术阅读 开源中国:http://www.oschina.net/ 一点资讯:http://www.yidianzixun.com/ CSDN:https://www.csdn.net/ 掘金:https://juejin.im/timeline 开发者头条:https://toutiao.io/ 简书:https://www.jianshu.com/ Git平台 GitHub:https://github.com/ 码云:https://gitee.com/ Coding:https://coding.net"},{"title":"我的生活","date":"2018-01-09T10:35:55.000Z","updated":"2018-06-28T07:20:42.786Z","comments":true,"path":"life/index.html","permalink":"http://www.jibaole.top/life/index.html","excerpt":"","text":""},{"title":"我的study","date":"2018-01-09T10:34:54.000Z","updated":"2018-06-28T07:20:42.786Z","comments":true,"path":"study/index.html","permalink":"http://www.jibaole.top/study/index.html","excerpt":"","text":""},{"title":"标签","date":"2018-06-28T07:20:42.786Z","updated":"2018-06-28T07:20:42.786Z","comments":true,"path":"tags/index.html","permalink":"http://www.jibaole.top/tags/index.html","excerpt":"","text":""},{"title":"程序员日常工具清单(汇总!!!)","date":"2018-01-09T10:35:05.000Z","updated":"2018-06-28T07:20:42.787Z","comments":true,"path":"tools/index.html","permalink":"http://www.jibaole.top/tools/index.html","excerpt":"保存知识的类型包括图片、链接、文章、资源等等,如何保存、管理平时接触到的内容,同类工具相互对比、选择呢?如何高效率完成工作,我对自己平时使用过的工具归类、总结，希望对大家有所帮助!!!","text":"保存知识的类型包括图片、链接、文章、资源等等,如何保存、管理平时接触到的内容,同类工具相互对比、选择呢?如何高效率完成工作,我对自己平时使用过的工具归类、总结，希望对大家有所帮助!!! 记录工具 有道笔记:https://www.youdao.com(强烈推荐) Evernote:https://www.yinxiang.com/ OneNote:http://www.onenote.com/download/ 云存储类 腾讯-微云:https://www.weiyun.com/(强烈推荐) 百度云盘:https://pan.baidu.com/ 七牛云:https://www.qiniu.com/ Dropbox:https://www.dropbox.com/ Google Drive:https://www.drive.google.com/ 外链工厂:http://www.wailian.work/image/Mg8kko 搜索工具 谷歌:https://www.google.com.hk/(强烈推荐) 百度:http://www.baidu.com/ 必应:https://cn.bing.com/ 桌面搜索 Everything:http://www.voidtools.com/ 分析 Google Analytics:http://www.voidtools.com/ 百度统计:https://tongji.baidu.com/ 编辑器 Sublime Text3:https://www.sublimetext.com/3 notepad++:https://notepad-plus-plus.org/ vim:http://www.vim.org/ 开发调试工具 Postman:https://www.getpostman.com/ IDE:https://www.jetbrains.com/idea/(强烈推荐) Xshell5:https://www.netsarang.com/download/main.html flashfxp:https://www.flashfxp.com/ SecureCRTP:http://rj.baidu.com/soft/detail/13503.html FTP管理:https://www.netsarang.com/download/down_xfp.html Navicat for xxx系列:http://www.navicat.com.cn/ 本地代理Whistle：https://avwo.github.io/whistle/install.html OpenVPN GUI:https://github.com/OpenVPN/openvpn-gui/releases SwitchHosts:https://github.com/oldj/SwitchHosts/downloads mogo管理工具：https://robomongo.org/ Redis管理工具：https://redisdesktop.com/ 文件对比工具：http://www.scootersoftware.com/download.php 内网穿透-Ngrok：https://ngrok.com/ | natapp:https://natapp.cn/login(强烈推荐) jd-gui:http://jd.benow.ca/ JSON View:http://jsonviewer.codeplex.com/ VPN 搬瓦工:https://www.bwh1.net/ OpenVPN:https://github.com/OpenVPN/openvpn-gui/releases 文档流程图 processon:https://www.processon.com/(强烈推荐) 百度脑图:http://naotu.baidu.com/ XMind http://www.xmindchina.net 产品设计 axure:https://www.axure.com/ 创客贴:https://www.chuangkit.com/ 墨刀:https://modao.cc/ xiaopiu:https://www.xiaopiu.com/ 技术资讯 开发者头条:https://toutiao.io/ 掘金:https://juejin.im/ 一点资讯:http://www.yidianzixun.com/ 简书:https://www.jianshu.com/ 开源中国:https://www.oschina.net/ CSDN:https://www.csdn.net/ 在线学习 极客学院:http://www.jikexueyuan.com/ 51CTO:http://edu.51cto.com/ 知识图谱:http://lib.csdn.net/bases 抢票软件 12306分流抢票:http://www.12306bypass.com/(强烈推荐) 智行:http://www.suanya.cn/ 时间管理 滴答清单:https://www.dida365.com/ 云端收藏夹 收趣:http://shouqu.me/(强烈推荐) 在线工具 有道翻译:http://fanyi.youdao.com/ | 百度翻译:http://fanyi.baidu.com/ 在线大全：https://tool.lu/ JS:http://runjs.cn/code excel互转:https://smallpdf.com/ 博客平台 Hexo:https://hexo.io/(强烈推荐) wordpress:https://cn.wordpress.org/ 论坛 discuz:http://www.discuz.net/ 后续不断更新ing……"}],"posts":[{"title":"HashMap源码分析","slug":"hashmap源码分析","date":"2018-04-28T09:36:46.000Z","updated":"2018-06-28T07:20:42.784Z","comments":true,"path":"2018/04/28/hashmap源码分析/","link":"","permalink":"http://www.jibaole.top/2018/04/28/hashmap源码分析/","excerpt":"HashMap不仅仅是java里面很重要的知识点，也是日常开发使用最多的集合框架。了解它的特性，会对日常开发有很大的帮助。","text":"HashMap不仅仅是java里面很重要的知识点，也是日常开发使用最多的集合框架。了解它的特性，会对日常开发有很大的帮助。 哈希冲突 哈希是指通过某种方法把数据转变成特定的数值，数值根据mod对应到不同的单元上。比如在Java中，字符串就是通过每个字符的编码来计算、数字是本身对应的值等等，不过就算是再好的哈希方法，也有可能出现两个不同的对象hash值相同的情况。如果在HashMap中，hashcode相同，它们就会被分配到对应的存储位置，此时就会出现冲突——也叫做哈希冲突。 解决哈希冲突的方法有很多种： 开放地址探测法：即如果出现哈希冲突，则按照一定的规则继续选择位置，如线性探测法再、二次探测再、伪随机探测等等。链地址法：如果出现冲突，则在冲突的位置后面形成链表进行存储。HashMap就是通过这种方式实现的再哈希法：这种方法是再换另一个哈希方法寻找存储的位置。 hashCode和equals 首先hashcode是经过一定的方法映射出的数值，而equals如果没有重写的话，是对比了每个内部的属性。总结的来说，如果两个对象hashcode相同，它们未必相等；如果hashcode不同，肯定不等。从另一个角度说，如果两个对象equals相等，它们肯定相等；如果equals不同，则它们不同。 那么肯定会有人疑问，那还要hashcode干嘛咧？Hashcode其实就是在hashMap或者hashset进行快速比较的时候有用，可以快速的判断对像是否不同，如果hashcode相同，则再继续对比equals方法。这样可以节省大量的时间。 HashMapHashMap允许null的key和value，HashMap根HashTable很像，只不过非线程安全并且允许Null值。 有两个参数会影响Map的性能，分别是初始容量initial capacity和负载参数load facotr(确定了什么时间增加hash table的容量)。当容量超过load factor*initial capacity时，就会进行扩容，然后执行rehash操作。 默认load factor时0.75，它基本已经能提供一个不错的性能效果了。不过在使用的初期可以预估一下数据量，直接设置一个比较适合的初始值。 注意：HashMap不是线程安全的，可以通过1Map m = Collections.synchronizedMap(new HashMap(...)) 实现线程安全的map. 创建1234transient Node&lt;K,V&gt;[] table;transient Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;int threshold;final float loadFactor; 新增1234567public V put(K key, V value) &#123; return putVal(hash(key), key, value, false, true);&#125;static final int hash(Object key) &#123; int h; return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);&#125; 主要的代码在这里：123456789101112131415161718192021222324252627282930313233343536373839404142final V putVal(int hash, K key, V value, boolean onlyIfAbsent,boolean evict) &#123; Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i; if ((tab = table) == null || (n = tab.length) == 0) n = (tab = resize()).length; if ((p = tab[i = (n - 1) &amp; hash]) == null) tab[i] = newNode(hash, key, value, null); else &#123; Node&lt;K,V&gt; e; K k; if (p.hash == hash &amp;&amp; ((k = p.key) == key || (key != null &amp;&amp; key.equals(k)))) e = p; else if (p instanceof TreeNode) e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value); else &#123; for (int binCount = 0; ; ++binCount) &#123; if ((e = p.next) == null) &#123; p.next = newNode(hash, key, value, null); // 如果每个链表长度超过8，那么就转为红黑树 if (binCount &gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st treeifyBin(tab, hash); break; &#125; if (e.hash == hash &amp;&amp; ((k = e.key) == key || (key != null &amp;&amp; key.equals(k)))) break; p = e; &#125; &#125; if (e != null) &#123; // existing mapping for key V oldValue = e.value; if (!onlyIfAbsent || oldValue == null) e.value = value; afterNodeAccess(e); return oldValue; &#125; &#125; ++modCount; if (++size &gt; threshold) resize(); afterNodeInsertion(evict); return null;&#125; 对于写操作的场景： 先会经过hash计算hashcode然后与size进行&amp;操作，判断存储的位置如果存储的位置没有节点，则直接写入如果存储的位置有节点，且是树节点，则向树中插入节点如果存储的位置有节点，不是树节点（而是普通的链表），则进行头插。但是会判断当前链表的长度，如果超过设置的阈值（默认是8），就会把链表转化成树。更新的时候也是上面的操作流程，只不过在对比hashcode相同时，还会检查key是否equals 读取和删除基本上也是上面的套路。 为什么非线程安全这个主要是因为在rehash的时候由于table[]后面接的是链表，而hashMap还是采用头插的形式。因此如果有不同的线程同时进行rehash，就可能导致链表形成环形，造成死循环。 具体的可以参考网上的文章：https://coolshell.cn/articles/9606.html","categories":[],"tags":[{"name":"java","slug":"java","permalink":"http://www.jibaole.top/tags/java/"},{"name":"Map","slug":"map","permalink":"http://www.jibaole.top/tags/map/"}]},{"title":"分布式理论-从ACID到CAP再到BASE","slug":"从acid到cap再到base","date":"2018-04-28T06:45:12.000Z","updated":"2018-06-28T07:20:42.785Z","comments":true,"path":"2018/04/28/从acid到cap再到base/","link":"","permalink":"http://www.jibaole.top/2018/04/28/从acid到cap再到base/","excerpt":"在传统的数据中，有ACID四大原则，在分布式中也有对应的CAP理论和BASE理论，这些都是分布式理论的基础~","text":"在传统的数据中，有ACID四大原则，在分布式中也有对应的CAP理论和BASE理论，这些都是分布式理论的基础~ 一、ACID ACID分别是Atomicity 原子性、Consistency 一致性、Isolation 隔离性、Durability 持久性，有了这几个特性，就保证了数据库的可靠。 原子性 原子性代表一系列的操作要么全做，要么全不做。比如，在银行转账，从一个账号扣钱，另一个账号加钱，这两个操作必须同时进行。否则就会出现账目对不上的情况。 一致性 一致性官方的描述是，事务执行后必须是从一个一致性状态转到另一个一致性状态。通俗点说就是保证整个系统在操作完成后，虽然处于不同状态，但仍保持一致。比如在转账情境中，从一个账号转出500，转入另一个账号，那么整个系统的金额不应该有变化。 隔离性 隔离性意味着多个并发之间是不可见的，相互隔离不被打扰。隔离性在数据库操作中还是很重要的，如果不考虑隔离性，可能会出现下面的问题： 1234567891011脏读：事务T1读取了事务T2未提交的数据，结果事务T2回滚了，T1拿到了一个脏数据不可重复读：事务T1读取数据后，紧接着事务T2就更新了数据，事务T1再次读取的时候发现数据不一致了幻读：这种一般发生在大批量修改的时候，比如事务T1把所有的数据从1修改到了2，结果修改的过程中，事务T2插入了一条新数据1。最后检查数据发现有一条数据没有修改过来。针对这几种情况，数据库如Mysql提供了几种事务的隔离级别：Serializable (串行化)：可避免脏读、不可重复读、幻读的发生。Repeatable read (可重复读)：可避免脏读、不可重复读的发生。Read committed (读已提交)：可避免脏读的发生。Read uncommitted (读未提交)：最低级别，任何情况都无法保证。持久性这种最容易理解了，事务提交后，结果就保存不变了。 ###二、CAP 在分布式系统中，也有类似ACID的特性，那就是CAP，他们分别是：123456789101112Consistency 一致性，强调进群节点中数据一致。在分布式中一致性又包括强一致性和弱一致性，强一致性就是指在任何时刻任何节点看到的数据都是一样的；弱一致性一般实现是最终一致性，即刚开始可能存在差异，但随着时间的推移，最终数据保持一致。Availability 可用性，强调集群在任何时间内都正常使用Partition Tolerance 分区容错性，即使某一部分集群坏掉，另一部分仍能正常工作。这三个特性只能满足其中两个，牺牲另一个。大部分系统也都是如此：一般来说分布式集群都会保证P优先，即集群部分节点坏死不影响整个集群的使用，然后再去追求C和A。因为如果放弃P——分区可用性，那不如就直接使用多个传统数据库了。事实上，很多微服务分库分表就是这个道理。如果追求强一致性，那么势必会导致可用性下降。比如在Master-Slave的场景中，Master负责数据写入，然后分发给各个节点，所有节点都写入成功，才算写入，这样保证了强一致性，但是延迟也会随之增加，导致可用性降低。因此在可用性和一致性之间，就出现了各种解决方案，如时序一致性、最终一致性等等。 ###三、BASE 前面由于分布式在CAP面前各种纠结，因此有人总结出了一套适合分布式的理论——BASE：12345678910BA，Basically Available 基本可用，比如降低性能要求、或者功能特性来保证整体的服务可用。比如服务的降级、增加延迟、等待等等。S，Soft State 软状态，允许出现中间状态，比如节点的不同副本之间同步存在延迟E，Eventual Consistency 最终一致性，具体的方案有很多，如因果一致性、读己一致性、会话一致性、单调读一致、单调写一致。对于这几种一致性，可以简单的说一下：因果一致性：进程B对进程A有依赖关系，那么B读取到的应该总是A更新后的值读己一致性：进程A更新某个值后，它自己读到的应该是最新的值会话一致性：在会话中进行操作，需要保证总是读取到最新的值单调读一致：从系统读取某个值后，不应该读取到比它还旧的值单调写一致：同一个进程对系统的写操作，需要保证顺序 参考:CAP原则(CAP定理)、BASE理论","categories":[],"tags":[{"name":"分布式","slug":"分布式","permalink":"http://www.jibaole.top/tags/分布式/"},{"name":"ACID","slug":"acid","permalink":"http://www.jibaole.top/tags/acid/"},{"name":"CAP","slug":"cap","permalink":"http://www.jibaole.top/tags/cap/"},{"name":"BASE","slug":"base","permalink":"http://www.jibaole.top/tags/base/"}]},{"title":"程序员日常工具清单(汇总!!!)","slug":"tools","date":"2018-01-09T10:35:05.000Z","updated":"2018-06-28T07:20:42.784Z","comments":true,"path":"2018/01/09/tools/","link":"","permalink":"http://www.jibaole.top/2018/01/09/tools/","excerpt":"保存知识的类型包括图片、链接、文章、资源等等,如何保存、管理平时接触到的内容,同类工具相互对比、选择呢?如何高效率完成工作,我对自己平时使用过的工具归类、总结，希望对大家有所帮助!!!","text":"保存知识的类型包括图片、链接、文章、资源等等,如何保存、管理平时接触到的内容,同类工具相互对比、选择呢?如何高效率完成工作,我对自己平时使用过的工具归类、总结，希望对大家有所帮助!!! 记录工具 有道笔记:https://www.youdao.com(强烈推荐) Evernote:https://www.yinxiang.com/ OneNote:http://www.onenote.com/download/ 云存储类 腾讯-微云:https://www.weiyun.com/(强烈推荐) 百度云盘:https://pan.baidu.com/ 七牛云:https://www.qiniu.com/ Dropbox:https://www.dropbox.com/ Google Drive:https://www.drive.google.com/ 外链工厂:http://www.wailian.work/image/Mg8kko 搜索工具 谷歌:https://www.google.com.hk/(强烈推荐) 百度:http://www.baidu.com/ 必应:https://cn.bing.com/ 桌面搜索 Everything:http://www.voidtools.com/ 分析 Google Analytics:http://www.voidtools.com/ 百度统计:https://tongji.baidu.com/ 编辑器 Sublime Text3:https://www.sublimetext.com/3 notepad++:https://notepad-plus-plus.org/ vim:http://www.vim.org/ 开发调试工具 Postman:https://www.getpostman.com/ IDE:https://www.jetbrains.com/idea/(强烈推荐) Xshell5:https://www.netsarang.com/download/main.html flashfxp:https://www.flashfxp.com/ SecureCRTP:http://rj.baidu.com/soft/detail/13503.html FTP管理:https://www.netsarang.com/download/down_xfp.html Navicat for xxx系列:http://www.navicat.com.cn/ 本地代理Whistle：https://avwo.github.io/whistle/install.html OpenVPN GUI:https://github.com/OpenVPN/openvpn-gui/releases SwitchHosts:https://github.com/oldj/SwitchHosts/downloads mogo管理工具：https://robomongo.org/ Redis管理工具：https://redisdesktop.com/ 文件对比工具：http://www.scootersoftware.com/download.php 内网穿透-Ngrok：https://ngrok.com/ | natapp:https://natapp.cn/login(强烈推荐) jd-gui:http://jd.benow.ca/ JSON View:http://jsonviewer.codeplex.com/ VPN 搬瓦工:https://www.bwh1.net/ OpenVPN:https://github.com/OpenVPN/openvpn-gui/releases 文档流程图 processon:https://www.processon.com/(强烈推荐) 百度脑图:http://naotu.baidu.com/ XMind http://www.xmindchina.net 产品设计 axure:https://www.axure.com/ 创客贴:https://www.chuangkit.com/ 墨刀:https://modao.cc/ xiaopiu:https://www.xiaopiu.com/ 技术资讯 开发者头条:https://toutiao.io/ 掘金:https://juejin.im/ 一点资讯:http://www.yidianzixun.com/ 简书:https://www.jianshu.com/ 开源中国:https://www.oschina.net/ CSDN:https://www.csdn.net/ 在线学习 极客学院:http://www.jikexueyuan.com/ 51CTO:http://edu.51cto.com/ 知识图谱:http://lib.csdn.net/bases 抢票软件 12306分流抢票:http://www.12306bypass.com/(强烈推荐) 智行:http://www.suanya.cn/ 时间管理 滴答清单:https://www.dida365.com/ 云端收藏夹 收趣:http://shouqu.me/(强烈推荐) 在线工具 有道翻译:http://fanyi.youdao.com/ | 百度翻译:http://fanyi.baidu.com/ 在线大全：https://tool.lu/ JS:http://runjs.cn/code excel互转:https://smallpdf.com/ 博客平台 Hexo:https://hexo.io/(强烈推荐) wordpress:https://cn.wordpress.org/ 论坛 discuz:http://www.discuz.net/ 后续不断更新ing……","categories":[{"name":"工具","slug":"工具","permalink":"http://www.jibaole.top/categories/工具/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://www.jibaole.top/tags/工具/"},{"name":"互联网","slug":"互联网","permalink":"http://www.jibaole.top/tags/互联网/"}]},{"title":"互联网程序员行话","slug":"互联网黑话","date":"2018-01-09T05:16:29.000Z","updated":"2018-06-28T07:20:42.785Z","comments":true,"path":"2018/01/09/互联网黑话/","link":"","permalink":"http://www.jibaole.top/2018/01/09/互联网黑话/","excerpt":"一、招聘行话大全，能听懂证明你是历经磨难的老司机刚开始投简历时，你总以为是这样的，其实大部分情况下是那样的……面试之后，HR让回去等消息，傻傻的等待，半个月以上没有回音，各种焦虑……明面上的意思就是实际意思的公司，貌似都是说的是别人的公司~~~~","text":"一、招聘行话大全，能听懂证明你是历经磨难的老司机刚开始投简历时，你总以为是这样的，其实大部分情况下是那样的……面试之后，HR让回去等消息，傻傻的等待，半个月以上没有回音，各种焦虑……明面上的意思就是实际意思的公司，貌似都是说的是别人的公司~~~~ 12345678910111213141516171819202122232425262728293031323334353637383940&gt;下面是职场达人总结的招聘行业术语（俗称招聘黑话），一看就懂证明你是历经磨难且具有拼搏精神的老司机，让我们一起来看看吧：1、能承受较大的工作压力——加班2、抗压能力强——加班+替别人扛雷3、工作有激情——自觉加班还要特美4、有强烈责任心——没做完不准走5、弹性工作制——加班不给加班费6、弹性工作制，但不保证准时下班——做完了才准走7、包三餐——早晚都得加班8、双休——工作日加班9、薪资+社保+带薪休假+职位晋升——是个正经公司都有，没什么拿得出手的福利10、适应较快的工作节奏——加班把三天的工作两天做完11、公司提供水果——貌似也就这一个福利12、有强烈的上进心——干完工作就加班去干其他工作13、喜欢有挑战性的工作——加班、前人留的坑不少14、不提倡加班——你懂的（该加还得加，加班是因为你工作效率低，不是安排工作多）15、不强制加班——你懂的 （不做完额外安排的工作你走一个试试！）16、上不封顶——下不保底17、偶尔会忙——以后忙了你别抱怨，提醒过了18、团队氛围很好——大家经常一起加班，一起吃加班餐，聊聊工作，多happy19、上升空间大——工资低，3000元涨个50%不也就4500吗？20、领导安排的其它任务——我叫你干啥你就得干啥21、妹子多——这个屌丝虽然脑子不太好使但便宜，看看这个理由能不能骗一蛤22、有期权——没多余的现金发工资给你23、有股权——工资微妙地低于你应得的数，反正我不信你能干满拿走24、年底双薪——13 薪25、13 薪起——别想了，就是13 薪26、年底有奖金——年薪大于 12 薪小于 13 薪27、我们 6 点准时下班 -——入职才知道最严重的早晨 6 点下班，回家吃早饭睡觉。28、扁平化管理 -——领导和你坐一屋，盯着你干活29、核心团队来自 BAT ——嗯，你不是BAT的，所以你不是核心30、\"我把你的简历整理一下\"——对方说这个的话基本可以判断他是卖人头外派的了,把你的简历给他的甲方。31、弹性工作时间——只弹下班（下班时间不固定），不弹上班32、能独立完成任务 ——前端后端或产品测试推广运营全都你一个人干33、领导好——看你顺眼就好，不顺眼就 XX ；你有生之年不可能有晋升的空间34、XXX 比钱重要——钱达不到你的要求35、公司会给你培训，但是工作之后你要交培训费——麻痹就是培训班36、BAT 薪资——略微高于本地市场价37、帮员工避税——按最低工资给你交社保公积金（五险一金）38、我们是创业公司——有不少坑要填，另请做好加班拼命的准备39、老板 /负责人不在，稍后会联系你的——面试不合格，不要抱期望了 二、独具互联网特色的招聘行话 123456789101112131415161718192021222340、期权激励拿到手软——希望能弥补你看到基本工资后的脚软41、专注移动互联网，拥有几亿活跃用户——&gt;就注册了个微信公众号42、有活力的技术团队——团队平均工作经验&lt;1年43、创始团队全部来自BAT——&gt;在淘宝干过客服、自己玩过微信公众号、还在百度实过习44、千亿市场的探索者——目前尚没看清具体市场在哪45、扁平化管理，高度自由——全公司人数，一只手就数的过来。46、典型欧美创业工作环境——办公室现处于毛坯房状态47、新技术+新方向+新团队——嗯，目前这三样都没有48、直进核心团队——公司尚未设置非核心团队岗49、全方位成长机会——你有很大机会成为外卖超人50、有机会晋升技术合伙人 ——&gt;现在就缺一个程序员来码代码了!51、提供各种福利——每样细说咱就伤感情了52、福利完善，待遇从优——&gt;严格按照法定节假日上班和……上班。53、有完善的员工期权激励措施——&gt;所以对工资要求别太高。54、提供住宿、班车及两餐——每周提供数小时时间与家人团聚55、底薪+岗位绩效+职称奖+管理绩效+提成+五险 ——和在一块您看看够不56、够付这个月房租?57、加入我们，给你足够大的发展空间！——目前公司规模&lt;10人58、女性员工占一半以上——&gt;创业公司的员工性别结构为:男生、女汉子以及别人的女友。59、深受资本追捧，行业方向被投资人看好——&gt;又有几个同行拿到融资了，而他们还在追着投资人跑60、大牛云集——我司属牛的同事比较多61、与互联网大咖面对面，有巨大成长空间——&gt;加了个混充有某某大佬的微信群，常年潜水从不说话，好友更不加。62、公司计划短期内上市——您也知道计划一般赶不上变化63、徘徊在牛A和牛C之间一群人！——永不止步，从来没在牛B上停驻过 三、程序员的职场行话123456789101112131415161718192021程序员也有自己的行业表达方式，这些话只要是老司机都能懂的：1、那个bug没问题啊，你再试试——刚偷偷改完这个bug2、下个版本再做吧——根本就不想做3、正在改——忘了有这回事了4、需求太不合理——这逻辑不好做5、别人家的实现方式不一样——我不会做6、产品逻辑不对——傻X，还不如我上7、最近老加班——老板该加工资了8、我回去评估一下技术难度——先拖两天9、你这个需求不清晰——我不想做10、你确定有这个需求吗？——做出来没人用老子跟你拼了11、下次肯定不延期了——先应付了这次再说12、你试过……——到底会不会用我的程序啊13、我测试没问题啊！——到底会不会用我的程序啊14、我的时间排满了——我不想做15、我有优先级更高的任务——我不想做16、我今晚有事——我今天不想加班17、我在调试程序——我没时间理你18、你怎么还在自学Python啊？——PHP才是最好的语言19、你怎么还用 Word 啊？——Markdown 才是最好的写作工具20、你怎么还在用 ThinkPad 啊？——Mac 才是最好的电脑 四、互联网人常用的行话 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879801、熊厂、狼厂、蓝厂——百度百度的Logo是一个蓝色的熊爪子，所以蓝厂和熊厂的名字是这样来的，但是相比来说，百度更多的时候被叫做狼厂，起源于百度CEO李彦宏给百度员工的一封公开信：《鼓励狼性淘汰小资》，引起广泛的讨论，之后百度有员工就开始称百度为「狼厂」。百老汇——百度离职员工组织百度老员工汇聚地，知名“百老汇”成员有王啸、边江、毕胜、周品等。肉饼——李彦宏同百度CEO李彦宏的英文名Robin的发音，李彦宏也叫厂长。有个段子是：“LR过了没有？”“没有提。”“经理批了没有？”“没有。”“架构批了没有？”“没有。”“需求池里排队了没有？”“没有。”“那你特喵跟我要排期？”“厂长报的。”“明天启动，周五上线！”狼性——洗脑在百度认可公司价值观，被称为狼性，被员工私下称为奴性。2、猫厂、东厂、西厂——阿里巴巴阿里巴巴是因为旗下天猫的Logo而演变来的，所以叫做猫厂。除此之外在浙江杭州有东西两处办公地点，被内部员工称为东厂和西厂。曾经的阿里人、前橙会、阿里校友会——阿里离职员工组织曾经的阿里人和阿里校友会这两个名字都是很好理解的，前橙会名字的由来是因为橙色是阿里巴巴的标志色彩,“前橙会”顾名思义是聚集阿里巴巴“原厂”员工的一个机构。百阿——洗脑百阿是百年阿里的简称，阿里巴巴从1999年成立，马云的设想是做到102年，这样就可以横跨20、21、22三个世纪。百阿是新员工培训，戏称洗脑。996——工作时间猫厂专用，指早上9点上班，晚上9点下班，一周工作6天。997就是一周工作7天。3.25——KPI阿里公司每年两次KPI考核，考核一般分为3.25、3.5、3.75，其比例是163，也就是10个人里必须有一个人拿3.25，两次3.25有可能要被末位淘汰。拥抱变化——变需求阿里公司的价值观之一，员工要时刻拥护。比方一个项目变来变去，可以说我们这是拥抱变化。3、鹅厂——腾讯腾讯名字的原由就比较简单了，因为腾讯的Logo是一只企鹅，企鹅也是鹅。南极圈、单飞的企鹅——腾讯离职员工组织腾讯经常在发布的产品中采用“飞翔的企鹅”作为昵称，因此这些离职的朋友把群的名字叫做“单飞的企鹅”。瑞雪——文明鹅厂专用，代表腾讯人良好的行为举止，涵盖道德、礼仪、职业行为，起源于某年腾讯员工冒着雨雪正常进行年会演出。不良好的行为比方插队，可以说这个人真不瑞雪。高压线——泄露工资鹅厂专用。有几条，包括严禁贪腐，严禁泄露工资等。一般指禁止透漏工资，触犯此条开除。8000——网管鹅厂内部电话，电脑问题找8000，密码忘了找8000，RTX登不了找8000……4、渣浪——新浪新浪人称渣浪人人都知道，当然这么渣的名字就不是自称得来的了，而是A站和B站网友对新浪视频的称号，起因是up主使用外链投稿曾多次被新浪审核但又无故删除，使得UP主们抓狂，从此就有了“战渣浪”的定义。毕浪——离职员工组织从新浪毕业的人，和碧浪同音。5、猪厂——网易这个名字内部人基本不用，也是属于外面人叫得比较多一点，起源是网易CEO丁磊在之前养过一段时间的猪，所以就这样被传开了。具有1-5工作经验的，面对目前流行的技术不知从何下手，需要突破技术瓶颈的可以加群。在公司待久了，过得很安逸，但跳槽时面试碰壁。需要在短时间内进修、跳槽拿高薪的可以加群。如果没有工作经验，但基础非常扎实，对java工作机制，常用设计思想，常用java开发框架掌握熟练的可以加群。java架构群：591240817 一起交流。离易、妖鹿山——离职员工组织离易的意思就是离开网易，和离异同音，妖鹿山同音163，是网易的域名。6、狐厂——搜狐搜狐的吉祥物是一只红色大尾巴的小狐狸，所以被叫做狐厂，不过对搜狐的人使用花名的时间并不多。7、狗厂——京东由来：为了和天猫打一场硬架，2013年3月30日，京东高调地更换域名、logo及VI系统,随之,一只名为“Joy”的金属小狗也空降互联网，于是在电商领域，阿里巴巴和京东的交战也可以被称为“猫狗大战”。东京不热——离职员工组织京东，东京，东京热，东京不热。8、绿厂、数字公司——奇虎360由来：绿厂名字的带来是360的Logo颜色，不过OPPO也是绿色的Logo所以也被叫做绿厂，但是360更加出名的花名是数字公司，因为360嘛。9、杂粮、粗粮、粮厂——小米由来：杂粮名字的由来是360周鸿祎2012年和雷军在微博上打口水战而来，而后又被传播为粗粮和粮厂。小米粒——小米离职员工组织10、盛斗士——盛大离职员工组织据说在盛大工作过1-2年叫盛斗士;3-5年叫必盛客;6-9年叫斗战盛佛，10年以上叫齐天大盛。消失的巨人——巨人离职员工组织旧金山——金山离职员工组织老友记——人人网离职员工组织这个名字源于公司附近的一家餐馆，以及人人的社交属性。驼厂——去哪儿来由：去哪儿的logo演变过来的。鸟厂、蜂厂——迅雷来由：迅雷公司的主打产品迅雷下载，其Logo为一只蜂鸟，不过被叫做鸟厂的情况居多。豆厂——豆瓣来由：取豆瓣公司的名字豆字。豆瓣的员工多数自称厂工。松鼠厂——UC来由：UC浏览器的logo里面有一只橙色的松鼠。海豚厂——携程来由：携程logo演变而来的。牛厂——途牛来由：logo演变而来的。马路公司——第七大道来由：大道不就是马路吗? 五、听懂中国 “外交行话”必备大全123456789101112经常在电视上看到国家领导人和外国领导人亲切友好的会谈，他们的1、亲切友好的交谈——字面意思；2、坦率交谈——分歧很大，无法沟通；3、交换了意见——会谈各说各的，没有达成协议；4、充分交换了意见——双方无法达成协议，吵得厉害；5、增进了双方的了解——双方分歧很大；6、会谈是有益的——双方目标暂时相距甚远，能坐下来谈就很好；7、我们持保留态度——我们拒绝同意；8、尊重——不完全同意；9、赞赏——不尽同意；10、遗憾——不满；11、不愉快——激烈的冲突；","categories":[{"name":"互联网","slug":"互联网","permalink":"http://www.jibaole.top/categories/互联网/"}],"tags":[{"name":"互联网","slug":"互联网","permalink":"http://www.jibaole.top/tags/互联网/"},{"name":"行话","slug":"行话","permalink":"http://www.jibaole.top/tags/行话/"}]},{"title":"Redis常用操作命令","slug":"Redis","date":"2018-01-06T12:07:43.000Z","updated":"2018-06-28T07:20:42.783Z","comments":true,"path":"2018/01/06/Redis/","link":"","permalink":"http://www.jibaole.top/2018/01/06/Redis/","excerpt":"Redis常用操作命令官网地址(中文)：http://www.redis.cn/桌面客户端：https://redisdesktop.com/download入门教程：http://www.runoob.com/redis/redis-tutorial.html","text":"Redis常用操作命令官网地址(中文)：http://www.redis.cn/桌面客户端：https://redisdesktop.com/download入门教程：http://www.runoob.com/redis/redis-tutorial.html Redis是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。 它支持多种类型的数据结构，如 字符串（strings）， 散列（hashes）， 列表（lists）， 集合（sets）， 有序集合（sorted sets） 与范围查询， bitmaps， hyperloglogs 和 地理空间（geospatial） 索引半径查询。 Redis 内置了 复制（replication），LUA脚本（Lua scripting）， LRU驱动事件（LRU eviction），事务（transactions） 和不同级别的 磁盘持久化（persistence）， 并通过 Redis哨兵（Sentinel）和自动 分区（Cluster）提供高可用性（high availability）。 一、对value操作的命令12345678910111213exists(key)：确认一个key是否存在del(key)：删除一个keytype(key)：返回值的类型keys(pattern)：返回满足给定pattern的所有keyrandomkey：随机返回key空间的一个keyrename(oldname, newname)：将key由oldname重命名为newname，若newname存在则删除newname表示的keydbsize：返回当前数据库中key的数目expire：设定一个key的活动时间（s）ttl：获得一个key的活动时间select(index)：按索引查询move(key, dbindex)：将当前数据库中的key转移到有dbindex索引的数据库flushdb：删除当前选择数据库中的所有keyflushall：删除所有数据库中的所有key 二、对String操作的命令1234567891011121314set(key, value)：给数据库中名称为key的string赋予值valueget(key)：返回数据库中名称为key的string的valuegetset(key, value)：给名称为key的string赋予上一次的valuemget(key1, key2,…, key N)：返回库中多个string（它们的名称为key1，key2…）的valuesetnx(key, value)：如果不存在名称为key的string，则向库中添加string，名称为key，值为valuesetex(key, time, value)：向库中添加string（名称为key，值为value）同时，设定过期时间timemset(key1, value1, key2, value2,…key N, value N)：同时给多个string赋值，名称为key i的string赋值value imsetnx(key1, value1, key2, value2,…key N, value N)：如果所有名称为key i的string都不存在，则向库中添加string，名称key i赋值为value iincr(key)：名称为key的string增1操作incrby(key, integer)：名称为key的string增加integerdecr(key)：名称为key的string减1操作decrby(key, integer)：名称为key的string减少integerappend(key, value)：名称为key的string的值附加valuesubstr(key, start, end)：返回名称为key的string的value的子串 三、对List操作的命令12345678910rpush(key, value)：在名称为key的list尾添加一个值为value的元素lpush(key, value)：在名称为key的list头添加一个值为value的 元素llen(key)：返回名称为key的list的长度lrange(key, start, end)：返回名称为key的list中start至end之间的元素（下标从0开始，下同）ltrim(key, start, end)：截取名称为key的list，保留start至end之间的元素lindex(key, index)：返回名称为key的list中index位置的元素lset(key, index, value)：给名称为key的list中index位置的元素赋值为valuelrem(key, count, value)：删除count个名称为key的list中值为value的元素。count为0，删除所有值为value的元素，count&gt;0从 头至尾删除count个值为value的元素，count&lt;0从尾到头删除|count|个值为value的元素。 lpop(key)：返回并删除名称为key的list中的首元素 rpop(key)：返回并删除名称为key的list中的尾元素 blpop(key1, key2,… key N, timeout)：lpop命令的block版本。即当timeout为0时，若遇到名称为key i的list不存在或该list为空，则命令结束。如果timeout&gt;0，则遇到上述情况时，等待timeout秒，如果问题没有解决，则对 keyi+1开始的list执行pop操作。brpop(key1, key2,… key N, timeout)：rpop的block版本。参考上一命令。rpoplpush(srckey, dstkey)：返回并删除名称为srckey的list的尾元素，并将该元素添加到名称为dstkey的list的头部 四、对Set操作的命令1234567891011121314sadd(key, member)：向名称为key的set中添加元素membersrem(key, member) ：删除名称为key的set中的元素memberspop(key) ：随机返回并删除名称为key的set中一个元素smove(srckey, dstkey, member) ：将member元素从名称为srckey的集合移到名称为dstkey的集合scard(key) ：返回名称为key的set的基数sismember(key, member) ：测试member是否是名称为key的set的元素sinter(key1, key2,…key N) ：求交集sinterstore(dstkey, key1, key2,…key N) ：求交集并将交集保存到dstkey的集合sunion(key1, key2,…key N) ：求并集sunionstore(dstkey, key1, key2,…key N) ：求并集并将并集保存到dstkey的集合sdiff(key1, key2,…key N) ：求差集sdiffstore(dstkey, key1, key2,…key N) ：求差集并将差集保存到dstkey的集合smembers(key) ：返回名称为key的set的所有元素srandmember(key) ：随机返回名称为key的set的一个元素 五、对zset（sorted set）操作的命令123456789zadd(key, score, member)：向名称为key的zset中添加元素member，score用于排序。如果该元素已经存在，则根据score更新该元素的顺序。zrem(key, member) ：删除名称为key的zset中的元素memberzincrby(key, increment, member) ：如果在名称为key的zset中已经存在元素member，则该元素的score增加increment；否则向集合中添加该元素，其score的值为incrementzrank(key, member) ：返回名称为key的zset（元素已按score从小到大排序）中member元素的rank（即index，从0开始），若没有member元素，返回“nil”zrevrank(key, member) ：返回名称为key的zset（元素已按score从大到小排序）中member元素的rank（即index，从0开始），若没有member元素，返回“nil”zrange(key, start, end)：返回名称为key的zset（元素已按score从小到大排序）中的index从start到end的所有元素zrevrange(key, start, end)：返回名称为key的zset（元素已按score从大到小排序）中的index从start到end的所有元素zrangebyscore(key, min, max)：返回名称为key的zset中score &gt;= min且score &lt;= max的所有元素 zcard(key)：返回名称为key的zset的基数 zscore(key, element)：返回名称为key的zset中元素element的score zremrangebyrank(key, min, max)：删除名称为key的zset中rank &gt;= min且rank &lt;= max的所有元素 zremrangebyscore(key, min, max) ：删除名称为key的zset中score &gt;= min且score &lt;= max的所有元素zunionstore / zinterstore(dstkeyN, key1,…,keyN, WEIGHTS w1,…wN, AGGREGATE SUM|MIN|MAX)：对N个zset求并集和交集，并将最后的集合保存在dstkeyN中。对于集合中每一个元素的score，在进行 AGGREGATE运算前，都要乘以对于的WEIGHT参数。如果没有提供WEIGHT，默认为1。默认的AGGREGATE是SUM，即结果集合中元素 的score是所有集合对应元素进行SUM运算的值，而MIN和MAX是指，结果集合中元素的score是所有集合对应元素中最小值和最大值。 六、对Hash操作的命令123456hset(key, field, value)：向名称为key的hash中添加元素field&lt;—&gt;valuehget(key, field)：返回名称为key的hash中field对应的valuehmget(key, field1, …,field N)：返回名称为key的hash中field i对应的valuehmset(key, field1, value1,…,field N, value N)：向名称为key的hash中添加元素field i&lt;—&gt;value ihincrby(key, field, integer)：将名称为key的hash中field的value增加integerhexists(key, field)：名称为key的hash中是否存在键为field的域","categories":[],"tags":[{"name":"Redis","slug":"redis","permalink":"http://www.jibaole.top/tags/redis/"}]},{"title":"Markdown 编辑阅读器(效果)","slug":"markdown-use","date":"2017-02-03T05:54:30.000Z","updated":"2018-06-28T07:20:42.784Z","comments":true,"path":"2017/02/03/markdown-use/","link":"","permalink":"http://www.jibaole.top/2017/02/03/markdown-use/","excerpt":"我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，Markdown 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用Markdown~","text":"我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，Markdown 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用Markdown~ 整理知识，学习笔记 发布日记，杂文，所见所想 撰写发布技术文稿（代码支持） 撰写发布学术论文（LaTeX 公式支持） 除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载： Windows/Mac/Linux 全平台客户端 请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 新文稿 或者使用快捷键 Ctrl+Alt+N。 什么是 MarkdownMarkdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，粗体 或者 斜体 某些文字，更棒的是，它还可以 1. 制作一份待办事宜 Todo 列表 [ ] 支持以 PDF 格式导出文稿 [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率 [x] 新增 Todo 列表功能 [x] 修复 LaTex 公式渲染问题 [x] 新增 LaTex 公式编号功能 2. 书写一个质能守恒公式[^LaTeX]$$E=mc^2$$ 3. 高亮一段代码[^code]1234567@requires_authorizationclass SomeClass: passif __name__ == '__main__': # A comment print 'hello world' 4. 高效绘制 流程图12345678st=&gt;start: Startop=&gt;operation: Your Operationcond=&gt;condition: Yes or No?e=&gt;endst-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op 5. 高效绘制 序列图123Alice-&gt;Bob: Hello Bob, how are you?Note right of Bob: Bob thinksBob--&gt;Alice: I am good thanks! 6. 高效绘制 甘特图12345678910111213title 项目开发流程section 项目确定 需求分析 :a1, 2016-06-22, 3d 可行性报告 :after a1, 5d 概念验证 : 5dsection 项目实施 概要设计 :2016-07-05 , 5d 详细设计 :2016-07-08, 10d 编码 :2016-07-15, 10d 测试 :2016-07-22, 5dsection 发布验收 发布: 2d 验收: 3d 7. 绘制表格 项目 价格 数量 计算机 \\$1600 5 手机 \\$12 12 管线 \\$1 234 8. 更详细语法说明想要查看更详细的语法说明，可以参考我们准备的 Cmd Markdown 简明语法手册，进阶用户可以参考 Cmd Markdown 高阶语法手册 了解更多高级功能。 总而言之，不同于其它 所见即所得 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。 什么是 Cmd Markdown您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 编辑/发布/阅读 Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。 1. 实时同步预览我们将 Cmd Markdown 的主界面一分为二，左边为编辑区，右边为预览区，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！ 2. 编辑工具栏也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 编辑区 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。 3. 编辑模式完全心无旁骛的方式编辑文字：点击 编辑工具栏 最右侧的拉伸按钮或者按下 Ctrl + M，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！ 4. 实时的云端文稿为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 编辑工具栏 的最右侧提示 已保存 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。 5. 离线模式在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。 6. 管理工具栏为了便于管理您的文稿，在 预览区 的顶部放置了如下所示的 管理工具栏： 通过管理工具栏可以： 发布：将当前的文稿生成固定链接，在网络上发布，分享 新建：开始撰写一篇新的文稿 删除：删除当前的文稿 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地 列表：所有新增和过往的文稿都可以在这里查看、操作 模式：切换 普通/Vim/Emacs 编辑模式 7. 阅读工具栏 通过 预览区 右上角的 阅读工具栏，可以查看当前文稿的目录并增强阅读体验。 工具栏上的五个图标依次为： 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落 视图：互换左边编辑区和右边预览区的位置 主题：内置了黑白两种模式的主题，试试 黑色主题，超炫！ 阅读：心无旁骛的阅读模式提供超一流的阅读体验 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境 8. 阅读模式在 阅读工具栏 点击 或者按下 Ctrl+Alt+M 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。 9. 标签、分类和搜索在编辑区任意行首位置输入以下格式的文字可以标签当前文档： 标签： 未分类 标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示： 10. 文稿发布和分享在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 (Ctrl+Alt+P) 发布这份文档给好友吧！ 再一次感谢您花费时间阅读这份欢迎稿，点击 (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！ [^LaTeX]: 支持 LaTeX 编辑显示支持，例如：$\\sum_{i=1}^n a_i=0$， 访问 MathJax 参考更多使用方法。 [^code]: 代码高亮功能支持包括 Java, Python, JavaScript 在内的，四十一种主流编程语言。","categories":[],"tags":[]},{"title":"Java爬虫框架WebMagic的使用总结","slug":"WebMagic","date":"2016-12-06T14:07:46.000Z","updated":"2018-06-28T07:20:42.784Z","comments":true,"path":"2016/12/06/WebMagic/","link":"","permalink":"http://www.jibaole.top/2016/12/06/WebMagic/","excerpt":"最近，项目做一个公司新闻网站，分为PC&amp;移动端(h5)，数据来源是从HSZX与huanqiu2个网站爬取，主要使用Java编写的WebMagic作为爬虫框架，数据分为批量抓取、增量抓取，批量抓当前所有历史数据，增量需要每10分钟定时抓取一次，由于从2个网站抓取，并且频道很多，数据量大，更新频繁；开发过程中遇到很多的坑，今天腾出时间，感觉有必要做以总结。","text":"最近，项目做一个公司新闻网站，分为PC&amp;移动端(h5)，数据来源是从HSZX与huanqiu2个网站爬取，主要使用Java编写的WebMagic作为爬虫框架，数据分为批量抓取、增量抓取，批量抓当前所有历史数据，增量需要每10分钟定时抓取一次，由于从2个网站抓取，并且频道很多，数据量大，更新频繁；开发过程中遇到很多的坑，今天腾出时间，感觉有必要做以总结。 工具说明 1、WebMagic是一个简单灵活的爬虫框架。基于WebMagic，你可以快速开发出一个高效、易维护的爬虫。 官网地址：http://webmagic.io/ 文档说明：http://webmagic.io/docs/zh/ 2、jsoup是Java的一个html解析工作，解析性能很不错。 文档地址：http://www.open-open.com/jsoup/ 3、Jdiy一款超轻量的java极速开发框架，javaEE/javaSE环境均适用，便捷的数据库CRUD操作API。支持各大主流数据库。 官网地址：http://www.jdiy.org/jdiy.jd 使用到的技术，如下 12WebMagic作为爬虫框架、httpclient作为获取网页工具、Jsoup作为分析页面定位抓取内容、ExecutorService线程池作为定时增量抓取、Jdiy作为持久层框架 项目简介历史抓取代码(忽略，可以查看源码)增量抓取代码，如下((忽略，可以查看源码))&gt; 说明：增量每10分钟执行一次，每次只抓取最新一页数据，根据增量标识(上一次第一条新闻news_id)， &gt; 存在相同news_id或一页爬完就终止抓取。 定时抓取，配置如下 web.xml重配置监听 12345&lt;!-- 添加：增量数据抓取监听 --&gt;&lt;listener&gt; &lt;listener-class&gt;com.spider.utils.AutoRun&lt;/listener-class&gt;&lt;/listener&gt; 定时代码 1234567891011121314151617181920212223242526272829303132333435363738394041package com.spider.utils;import java.util.concurrent.Executors;import java.util.concurrent.ScheduledExecutorService;import java.util.concurrent.TimeUnit;import javax.servlet.ServletContextEvent;import javax.servlet.ServletContextListener;import com.spider.huanqiu.timer.HQJob1;import com.spider.huanqiu.timer.HQJob2;import com.spider.huanqiu.timer.HQJob3;import com.spider.huanqiu.timer.HQJob4;import com.spider.huasheng.timer.HSJob1;import com.spider.huasheng.timer.HSJob2;/** * 描 述：监听增量抓取Job * 创建时间：2016-11-4 * @author Jibaole */public class AutoRun implements ServletContextListener &#123; public void contextInitialized(ServletContextEvent event) &#123; ScheduledExecutorService scheduExec = Executors.newScheduledThreadPool(6); /* * 这里开始循环执行 HSJob()方法了 * scheduleAtFixedRate(param1, param2,param3)这个函数的三个参数的意思分别是： * param1：你要执行的方法；param2：延迟执行的时间，单位毫秒；param3：循环间隔时间，单位毫秒 */ scheduExec.scheduleAtFixedRate(new HSJob1(), 1*1000*60,1000*60*10,TimeUnit.MILLISECONDS); //延迟1分钟，设置没10分钟执行一次 scheduExec.scheduleAtFixedRate(new HSJob2(), 3*1000*60,1000*60*10,TimeUnit.MILLISECONDS); //延迟3分钟，设置没10分钟执行一次 scheduExec.scheduleAtFixedRate(new HQJob1(), 5*1000*60,1000*60*10,TimeUnit.MILLISECONDS); //延迟5分钟，设置没10分钟执行一次 scheduExec.scheduleAtFixedRate(new HQJob2(), 7*1000*60,1000*60*10,TimeUnit.MILLISECONDS); //延迟7分钟，设置没10分钟执行一次 scheduExec.scheduleAtFixedRate(new HQJob3(), 9*1000*60,1000*60*14,TimeUnit.MILLISECONDS); //延迟9分钟，设置没10分钟执行一次 scheduExec.scheduleAtFixedRate(new HQJob4(), 11*1000*60,1000*60*10,TimeUnit.MILLISECONDS); //延迟11分钟，设置没10分钟执行一次 &#125; public void contextDestroyed(ServletContextEvent event) &#123; System.out.println(&quot;=======timer销毁==========&quot;); //timer.cancel(); &#125;&#125; 具体执行业务(举一个例子) 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879package com.spider.huasheng.timer;import java.util.ArrayList;import java.util.List;import java.util.TimerTask;import com.spider.huasheng.task.HSTaskDao;import com.spider.huasheng.task.HSTaskDao1;import com.spider.huasheng.task.HSTaskDao2;/** * 描 述：国际、社会、国内、评论等频道定时任务 * 创建时间：2016-11-9 * @author Jibaole */public class HSJob1 implements Runnable&#123; @Override public void run() &#123; System.out.println(&quot;======&gt;&gt;&gt;开始：xxx-任务1====&quot;); try &#123; runNews(); runNews1(); runNews2(); &#125; catch (Throwable t) &#123; System.out.println(&quot;Error&quot;); &#125; System.out.println(&quot;======xxx-任务1&gt;&gt;&gt;结束！！！====&quot;); &#125; /** * 抓取-新闻 频道列表 */ public void runNews()&#123; List&lt;String&gt; strList=new ArrayList&lt;String&gt;(); /**##############&gt;&gt;&gt;16、国际&lt;&lt;&lt;##################*/ //国际视野 strList.add(&quot;http://xxx/class/2199.html?pindao=国际&quot;); /**##############&gt;&gt;&gt;17、社会&lt;&lt;&lt;##################*/ //社会 strList.add(&quot;http://xxx/class/2200.html?pindao=社会&quot;); /**##############&gt;&gt;&gt;18、国内&lt;&lt;&lt;##################*/ //国内动态 strList.add(&quot;http://xxx/class/1922.html?pindao=国内&quot;); HQNewsTaskDao.runNewsList(strList); &#125; /** * 抓取-新闻 频道列表 */ public void runNews1()&#123; List&lt;String&gt; strList=new ArrayList&lt;String&gt;(); /**##############&gt;&gt;&gt;19、评论&lt;&lt;&lt;##################*/ //华声视点 strList.add(&quot;http://xxx/class/709.html?pindao=评论&quot;); //财经观察 strList.add(&quot;http://xxx/class/2557.html?pindao=评论&quot;); /**##############&gt;&gt;&gt;20、军事&lt;&lt;&lt;##################*/ //军事 strList.add(&quot;http://xxx/class/2201.html?pindao=军事&quot;); HQNewsTaskDao.runNewsList(strList); &#125; /** * 抓取-新闻 频道列表 */ public void runNews2()&#123; List&lt;String&gt; strList=new ArrayList&lt;String&gt;(); /**##############&gt;&gt;&gt;24、财经&lt;&lt;&lt;##################*/ //财讯 strList.add(&quot;http://xxx/class/2353.html?pindao=财经&quot;); //经济观察 strList.add(&quot;http://xxx/class/2348.html?pindao=财经&quot;); /**##############&gt;&gt;&gt;30、人文&lt;&lt;&lt;##################*/ //历史上的今天 strList.add(&quot;http://xxx/class/1313.html?pindao=人文&quot;); //正史风云 strList.add(&quot;http://xxx/class/1362.html?pindao=人文&quot;); HSTaskDao2.runNewsList(strList); &#125;&#125; 遇到的坑增量抓取经常遇到这2个异常，如下 抓取超时：Jsoup 获取页面内容，替换为 httpclient获取，Jsoup去解析页面gzip异常（这个问题特别坑，导致历史、增量抓取数据严重缺失，线上一直有问题） 解决方案： 增加：Site..addHeader(“Accept-Encoding”, “/“) 这个是WebMagic的框架源码有点小Bug,如果没有设置Header，默认页面Accept-Encoding为：gzip 定时抓取&gt; 由ScheduledExecutorService多线程并行执行任务，替换Timer单线程串行 &gt; 原方式代码，如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152package com.spider.utils;import java.util.Timer;import javax.servlet.ServletContextEvent;import javax.servlet.ServletContextListener;import com.spider.huanqiu.timer.HQJob1;import com.spider.huanqiu.timer.HQJob2;import com.spider.huanqiu.timer.HQJob3;import com.spider.huanqiu.timer.HQJob4;import com.spider.huasheng.timer.HSJob1;import com.spider.huasheng.timer.HSJob2;/** * 描 述：监听增量抓取Job * 创建时间：2016-11-4 * @author Jibaole */public class AutoRun implements ServletContextListener &#123; //HS-job private Timer hsTimer1 = null; private Timer hsTimer2 = null; //HQZX-job private Timer hqTimer1 = null; private Timer hqTimer2 = null; private Timer hqTimer3 = null; private Timer hqTimer4 = null; public void contextInitialized(ServletContextEvent event) &#123; hsTimer1 = new Timer(true); hsTimer2 = new Timer(true); hqTimer1 = new Timer(true); hqTimer2 = new Timer(true); hqTimer3 = new Timer(true); hqTimer4 = new Timer(true); /* * 这里开始循环执行 HSJob()方法了 * schedule(param1, param2,param3)这个函数的三个参数的意思分别是： * param1：你要执行的方法；param2：延迟执行的时间，单位毫秒；param3：循环间隔时间，单位毫秒 */ hsTimer1.scheduleAtFixedRate(new HSJob1(), 1*1000*60,1000*60*10); //延迟1分钟，设置没10分钟执行一次 hsTimer2.scheduleAtFixedRate(new HSJob2(), 3*1000*60,1000*60*10); //延迟3分钟，设置没10分钟执行一次 hqTimer1.scheduleAtFixedRate(new HQJob1(), 5*1000*60,1000*60*10); //延迟5分钟，设置没10分钟执行一次 hqTimer2.scheduleAtFixedRate(new HQJob2(), 7*1000*60,1000*60*10); //延迟7分钟，设置没10分钟执行一次 hqTimer3.scheduleAtFixedRate(new HQJob3(), 9*1000*60,1000*60*10); //延迟9分钟，设置没10分钟执行一次 hqTimer4.scheduleAtFixedRate(new HQJob4(), 11*1000*60,1000*60*10); //延迟11分钟，设置没10分钟执行一次 &#125; public void contextDestroyed(ServletContextEvent event) &#123; System.out.println(\"=======timer销毁==========\"); //timer.cancel(); &#125;&#125; 定时多个任务时，使用多线程，遇到某个线程抛异常终止任务&gt; 解决方案：在多线程run()方法里面，增加try{}catch{} 通过HttpClient定时获取页面内容时，页面缓存，抓不到最新内容&gt; 解决方案：在工具类请求URL地址后面增加：url+&quot;?date=&quot; + new Date().getTime() 一些方面的处理页面抓取规则调整&gt; 先抓列表，在抓内容；改为 抓取列表的同时，需要获取内容详情 保存数据方式作调整&gt; 先抓取标题等概要信息，保存数据库，然后，更新内容信息，根据业务需求再删除一些非来源文章(版权问题)； 改为：直接控制来源，得到完整数据，再做批量保存； 页面有一个不想要的内容，处理方法&gt; 注释、JS代码、移除无用标签块","categories":[{"name":"Java","slug":"java","permalink":"http://www.jibaole.top/categories/java/"}],"tags":[{"name":"爬虫","slug":"爬虫","permalink":"http://www.jibaole.top/tags/爬虫/"},{"name":"WebMagic","slug":"webmagic","permalink":"http://www.jibaole.top/tags/webmagic/"}]},{"title":"Markdown简明语法","slug":"Markdown","date":"2016-12-02T05:54:30.000Z","updated":"2018-06-28T07:20:42.783Z","comments":true,"path":"2016/12/02/Markdown/","link":"","permalink":"http://www.jibaole.top/2016/12/02/Markdown/","excerpt":"Markdown是一种标记语言，通过简单的语法，可以让文本内容更加优美、提高视觉效果，简洁、方便~","text":"Markdown是一种标记语言，通过简单的语法，可以让文本内容更加优美、提高视觉效果，简洁、方便~ 一、Markdown基本语法 标题1234一级标题：#标题二级标题：##标题三级标题：###标题……………… 一级标题：#标题二级标题：##标题三级标题：###标题 段落与换行12段落：段落的前后必须是空行 换行：可以在前一行的末尾加入至少两个空格，然后换行写其它的文字 引用123多行引用：可每行前加'&lt;' 换行：在前一行的末尾加入至少两个空格 嵌套：在每个'&lt;'里面增加'&lt;',如：&lt;&lt; 引用内容开始 嵌套内容 引用内容结束 列表123无序列表：符号 空格 有序列表：数字 . 空格 注：无序：一般是：*、+、-；有序：1. 2. 等 列表1 列表1 列表1 列表1 代码块12代码块：代码块前后需要有至少一个空行，且每行代码前需要有至少一个 Tab 或四个空格 行内代码：也可以通过 ``，插入行内代码（` 是 Tab 键上边、数字 1 键左侧的那个按键） 这里显示代码块 分割线12代码块：可以在一行中使用三个或更多的 *、- 或 _ 来添加分隔线（&lt;hr&gt;） 多个字符之间可以有空格（空白符），但不能有其他字符 ** 超链接123普通连接(一般格式)：[Google](http://www.google.com/) //只显示文字，点击时跳转对应地址包含'title'的链接: [Google](http://www.google.com/ \"鼠标停留时，显示的文字说明\") 博客地址 图片12345行内式:插入图片的语法和插入超链接的语法基本一致，只是在最前面多一个'!' 语法：![Google](https://avatars2.google.com/u/3265208.jpg \"Google\") 参考式: 语法：1、![GitHub][github] 2、[github]: https://avatars2.google.com/u/3265208?v=3&amp;s=100 \"Google\" 强调1234斜体：使用 * * 或 _ _ 包括的文本会被转换为 &lt;em&gt;&lt;/em&gt; 语法：*斜体* 或 _斜体_加粗：使用 ** ** 或 __ __ 包括的文本会被转换为 &lt;strong&gt;&lt;/strong&gt; 语法：**加粗** 或 __加粗__ 斜体 或 斜体加粗 或 加粗 字符转义12语法：在需要转义的字符前面添加'\\' 比如:\\ ` *_&#123;&#125;[]()#+-.! 如：{} 二、Markdown扩展语法 删除线1语法：这就是 ~~删除线~~ 如：删除线 代码块和语法高亮12语 法：这里使用 ``` ``` 来包含多行代码，三个 ``` 要独占一行代码高亮：在第一组 ``` 之后添加代码的语言，如 'javascript' 或 'js' 表格123456语法：使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行 name | age ---- | --- Lear | 12 Mike | 32 name age Lear 12 Mike 32 三、工 具 常用的Markdown编辑器： markdownpad下载 MarkPad下载 Idea插件下载 常用的Markdown在线编辑器： 简书 马克飞象 CSDN 四、参考文章 感谢提供，能够借以参考： Markdown 语法说明 (简体中文版) Markdown 入门参考 Idea插件下载 结束语 学以致用，勿忘初衷！","categories":[],"tags":[{"name":"Markdown","slug":"markdown","permalink":"http://www.jibaole.top/tags/markdown/"}]},{"title":"Hexo在Coding上备份、恢复","slug":"Hexo-back","date":"2016-11-28T08:39:44.000Z","updated":"2018-06-28T07:20:42.783Z","comments":true,"path":"2016/11/28/Hexo-back/","link":"","permalink":"http://www.jibaole.top/2016/11/28/Hexo-back/","excerpt":"平时主要在公司、家伙其他地方写点东西，考虑到还需要重新搞一遍有点造轮子，就决定把Hexo部署到Git平台上，由于Coding可以建立私库，国内访问又给力…","text":"平时主要在公司、家伙其他地方写点东西，考虑到还需要重新搞一遍有点造轮子，就决定把Hexo部署到Git平台上，由于Coding可以建立私库，国内访问又给力… 备份 &amp;&amp; 恢复一、创建Blog仓库 在Coding 平台新建Blog仓库，作为博客备份库，如下图所示： 二、clone 本地 利用Intellij Idea将项目clone到本地 步骤：VCS——&gt;Checkout from Version Control——&gt;Git 复制Blog地址：https://git.coding.net/jibaole/Blog.git 本地路径：D:\\Idea_Workspaces,如下图所示： 三、备份 将博客下所有资源复制到Blog目录下 在生成的.gitignore文件添加： 12/.deploy_git #执行：hexo d 命令后，Hexo生成的静态Html文件，推送到GitHub、Coding供访问/public Intellij Idea下项目结构，如图所示： 然后在Intellij Idea中，对应Blog项目执行 add 、Commit 、Push等操作 这样我们在不同工作地点，都可以直接clone 下来，编辑 &amp; 新增 我们的博客内容 在本地执行：hexo clean &amp;&amp; hexo g &amp;&amp; hexo s 确认没什么问题 再执行：hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 一键部署到deploy设置的Pages 平台 然后，再Push我们的Blog文件到Coding上，到新的环境，首先Pull我们的Blog项目，在此基础上进行编辑,如此循环~~ 是不是很方便啊~~ 或可以通过命令方式，如下： 123456789101112131415&lt;!--在原博客路径，Git命令窗口执行--&gt;#git初始化git init#git 文件添加git add .#git 提交git commit -m \"初始化Hexo博客文件(备份)\"#添加远程仓库git remote add origin https://git.coding.net/jibaole/Blog.git#push到hexo分支git push origin hexo (或 git push -f origin hexo ) 结束语 每天进步一点点，善于分享，贵在坚持!","categories":[{"name":"Hexo","slug":"hexo","permalink":"http://www.jibaole.top/categories/hexo/"}],"tags":[{"name":"Hexo","slug":"hexo","permalink":"http://www.jibaole.top/tags/hexo/"},{"name":"Git","slug":"git","permalink":"http://www.jibaole.top/tags/git/"}]},{"title":"使用Hexo在GitHub、Coding空间上搭建技术博客--处女篇(基于Intellij Idea)","slug":"Hexo","date":"2016-11-27T10:19:24.000Z","updated":"2018-06-28T07:20:42.783Z","comments":true,"path":"2016/11/27/Hexo/","link":"","permalink":"http://www.jibaole.top/2016/11/27/Hexo/","excerpt":"Hexo是什么? Hexo 的中文官网：http://hexo.io/zh-cn/ yelee主题：http://moxfive.coding.me/yelee/ Hexo是基于Node.js快速、高效而简洁的博客框架,可以通过编辑Markdown文件快速生成静态页面,托管到GitHub Pages、Coding Pages上,通过平台提供的域名访问。","text":"Hexo是什么? Hexo 的中文官网：http://hexo.io/zh-cn/ yelee主题：http://moxfive.coding.me/yelee/ Hexo是基于Node.js快速、高效而简洁的博客框架,可以通过编辑Markdown文件快速生成静态页面,托管到GitHub Pages、Coding Pages上,通过平台提供的域名访问。 部署前介绍 Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 Hexo适合做什么? 当然，最适合做个人博客记录个人成长、技术总结、经验积累，并且可以部署到GitHub、Coding上。 作为技术博客是最佳的选择,学习一下Markdown基本语法,就是记录的利器 软件准备(本人在Windows环境) 安装Hexo、安装Git、Node.js 工具：Intellij Idea 文章前提 如果你对上面要求的软件一个都不了解的话，建议你先看如下内容（只是让你们先了解下，当时别照着文章内容做）： 如何搭建一个独立博客——简明Github Pages与Hexo教程 通过Hexo在Github上搭建博客教程 hexo你的博客 手把手教你建github技术博客 如何搭建一个独立博客——简明Github Pages与Hexo教程 windows下搭建hexo博客并将其部署到GitCafe终极教程 使用Hexo搭建博客（三），博客配置、主题和写作 Hexo搭建WiKi 怎么用hexo上传一个README.md到github? 域名绑定 如果你一开始就打算要绑定域名，则下面教程中所有可以填写域名的地方你都填写上你要绑定的域名，如果你没独立域名，那就使用 Github 默认给你的：XXXXXX.github.io 域名即可。 部署开始git 安装 双击运行 Git-2.7.0.2-64-bit.exe，接下来一律下一步，不需要多余的选择，假设你安装的目录位置跟我一样：C:\\Program Files\\Git 打开 Git Bash（路径：C:\\Program Files\\Git\\git-bash.exe），输入：git --version 如下图，如果出现：git version 2.7.0.windows.2，这表示安装成功 Node.js 安装 双击运行 node-v5.7.0-x64.msi，接下来一律下一步，不需要多余的选择。 安装完之后，打开 Git Bash，输入：npm -v 如下图，如果出现：3.8.9，则表示 Node.js 安装成功。如果你没有显示这个信息，我怀疑你需要重启电脑试试看，因为我在给我弟讲解这一步的时候发现有这个问题。 Node.js 源设置 在安装 Hexo 之前，先说一下 Node.js 的源，Node.js 官方源默认是：http://registry.npmjs.org，但是由于在国外，说不定你使用的时候就抽风无法下载任何软件。所以我们决定暂时使用淘宝提供的源，淘宝源官网：http://npm.taobao.org/ 在 Git Bash 中我们执行下面这一句（这是一整句的）： 1234alias cnpm=\"npm --registry=https://registry.npm.taobao.org \\--cache=$HOME/.npm/.cache/cnpm \\--disturl=https://npm.taobao.org/dist \\--userconfig=$HOME/.cnpmrc\" 现在验证下是否可以使用淘宝的 cnpm 命令：cnpm info express 如果能输出一大堆介绍，则说明成功了，以后每次要使用淘宝的源都需要这样来。现在除了默认的 npm，还多了一个 cnpm 可以使用，我们下面有关安装的讲解内容也都是基于此临时命令。 如果输出：bash: cnpm: command not found，则表示没成功，需要你在排查下 安装 Hexo 框架 $ cnpm install -g hexo-cli 使用命令创建Hexo博客1234567891011&lt;!-- 进入刚才创建的博客文件夹 --&gt;$ cd &lt;your-blog-folder&gt;&lt;!-- 初始化博客(这个时间也会比较长，也有可能要等几分钟，有显示 WARN 也不用管)--&gt;$ hexo init&lt;!-- 安装博客项目所需的packages ,有显示 WARN 也不用管 --&gt;$ cnpm install&lt;!--安装hexo-server,否则不能使用：hexo s 命令--&gt;$ cnpm install hexo-server --save 安装完成之后，E:\\git_work_space\\hexo 目录结构是这样的： 现在我们启动 hexo 本地服务，看下默认的博客是怎样的，命令：hexo server 现在用浏览器访问：http://localhost:4000/，效果如下图 如果要停止 hexo 服务：在 Git Bash 下按 Ctrl + C 即可 选用其他主题 由于默认主题太大众了，所以现在我们换个主题。 你可以去这里找主题： hexo-theme：https://hexo.io/themes/ hexo-github-theme-list：https://github.com/hexojs/hexo/wiki/Themes 有那些好看的hexo主题？：http://www.zhihu.com/question/24422335 我这里选择的 yelee：https://github.com/MOxFIVE/hexo-theme-yelee 原因是能最大化衬托出：目录、文章内容、代码块。因为我对这个博客的定位就是用来放技术类内容，所以不会让它太杂或是太花。只是目前这个颜色偏浅，后续还需要调整。 现在假设你跟我要用的模板是一样： 还是让 Git Bash 保持在 E:\\git_work_space\\hexo 目录下，然后输入命令：git clone https://github.com/MOxFIVE/hexo-theme-yelee.git themes/yelee 这样就在 E:\\git_work_space\\hexo\\themes 目录下生成了一个 yelle 文件夹，里面有我们刚刚 clone 下来的主题内容。 如果以后你不自己修改这个主题的话，可以考虑经常更新下作者的更新内容： cd e:/git_work_space/hexo/themes/yelee git pull origin master 下载好主题文件之后，我们现在要修改 E:\\git_work_space\\hexo 目录下的项目配置文件：_config.yml，把对应的主题目录名改下，编辑如下图。 更改主题目录名后，我们还要重新生成主题静态内容： 继续在 Git Bash 中输入命令： 重新生成静态博客的所有内容：hexo generate 重启 hexo 本地服务：hexo server 重新访问：http://localhost:4000/，效果如下图 创建 Github pages 并 SSH 授权 现在假设你已经有一个 Gtihub 账号，你还需要一个特别的仓库，特别在仓库名就是你的 Github 账号登录名，比如我的用户名是：jibaole，那我要创建的仓库名字完整滴填写是：jibaole.github.io。 创建好仓库之后，要本地生成 SSH 秘钥，方便电脑上的 git 软件好提交内容到 Github 上 在 Git Bash 中，输入：ssh-keygen -t rsa -C &quot;你的邮箱地址&quot;，然后回车，回车，再回车，一共 3 次回车，具体含义自己 Google。 比如我的：ssh-keygen -t rsa -C &quot;1577608819@gmail.com&quot;： 此时，生成密钥后，在你电脑目录：C:\\Users\\你的计算机用户名\\.ssh 下，会生成两个文件： 私钥：id_rsa 公钥：id_rsa.pub 如果生成的不是这样的文件，那删除掉这两个生成的，重新执行上面的命令，让它再一次生成。 现在用记事本打开 id_rsa.pub，复制文件中的所有内容。 访问：https://github.com/settings/ssh，添加新秘钥，效果如下图 Title：自己随便取 Key：把刚刚复制的都粘贴进来 把本地的博客内容同步到 Github 上 要把本地的静态博客同步到 Github，我们还需要先安装两个跟部署相关的 hexo 插件： 继续在 Git Bash 中输入： cnpm install hexo -server --save cnpm install hexo-deployer-git --save 编辑全局 hexo 的配置文件：_config.yml 官网对此配置的介绍：https://hexo.io/zh-cn/docs/configuration.html 我自己的编辑内容初稿（你需要认真看的是含有中文注释的内容）： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677# Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Site，这一块区域主要是设置博客的主要说明，需要注意的是：每个冒号后面都是有一个空格，然后再书写自己的内容的title: Paulsubtitle: 这里只有代码相关，要了解更多 &gt;&gt;&gt; jibao.topdescription: 这里是 jibao.top 一部分author: Paulemail: 1577608819@qq.comlanguage: zh-CNtimezone:# URL，这一块一般可以设置的是 url 这个参数，比如我要设置绑定域名的，这里就需要填写我的域名信息## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: http://www.jibaole.toproot: /permalink: :year/:month/:day/:title/permalink_defaults:# Directorysource_dir: sourcepublic_dir: publictag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/codei18n_dir: :langskip_render:# Writingnew_post_name: :title.md # File name of new postsdefault_layout: posttitlecase: false # Transform title into titlecaseexternal_link: true # Open external links in new tabfilename_case: 0render_drafts: falsepost_asset_folder: falserelative_link: falsefuture: truehighlight: enable: true line_number: true auto_detect: false tab_replace:# Category &amp; Tagdefault_category: uncategorizedcategory_map:tag_map:# Date / Time format## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DDtime_format: HH:mm:ss# Pagination## Set per_page to 0 to disable paginationper_page: 10pagination_dir: page# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: yelee# Deployment## 这里是重点，这里是修改发布地址，因为我们前面已经加了 SSH 密钥信息在 Github 设置里面了，所以只要我们电脑里面持有那两个密钥文件就可以无需密码地跟 Github 做同步。## 需要注意的是这里的 repo 采用的是 ssh 的地址，而不是 https 的。分支我们默认采用 master 分支，以后你翅膀硬了要换其他也无所谓。## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: github: git@github.com:jibaole/jibaole.github.io.git,master coding: git@git.coding.net:jibaole/jibaole.git,master 编辑全局配置后我们需要重新部署： 继续在 Git Bash 中输入命令： 先清除掉已经生成的旧文件：hexo clean 再生成一次静态文件：hexo generate 在本地预览下：hexo server 本地没问题之后，Ctrl + C 停掉本地预览。 在部署到 Github 之前，需要先确定你是否已经用过 Git，如果你没用过，则此时你需要做如下设置，在 Git Bash 中依次输入下面两个命令： git config --global user.email &quot;你的 Github 注册邮箱地址&quot; git config --global user.name &quot;你的 Github 用户名&quot; 使用部署命令部署到 Github 上：hexo deploy，有弹出下面提示框，请输入：yes 提交成功效果如下： 访问服务器地址进行检查：http://jibaole.github.io，效果如下 但是，也不排除你 deploy 不了到 Github，报这个错误：Host key verification failed，那解决办法如下： 还是在 Git Bash 界面中，输入如下命令：ssh -T git@github.com，根据界面提示，输入：yes 回车。之后你可以再试一下是否可以 deploy。 通过上面几次流程我们也就可以总结：以后，每次发表新文章要部署都按这样的流程来： hexo clean hexo generate hexo deploy 也因为这几个命令太频繁了，所以又有了精简版的命令： hexo clean == hexo clean hexo g == hexo generate hexo s == hexo server hexo d == hexo deploy 或使用：hexo clean &amp;&amp; hexo g &amp;&amp; hexo s 清数据-&gt;生成-&gt;启动本地服务(本地) hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 一键部署Pages空间(线上) 常用插件1234&gt; 本地服务： npm install hexo -server --save&gt; 部署到Pages: cnpm install hexo-deployer-git --save&gt; 搜索：npm install --save hexo-generator-search&gt; RSS: npm install hexo-generator-feed --save 绑定域名 绑定域名不排除会遇到很多网络问题或是七七八八，所以这里先提供先官网的一些说明： https://help.github.com/articles/setting-up-your-pages-site-repository/ https://help.github.com/articles/quick-start-setting-up-a-custom-domain/ https://help.github.com/articles/setting-up-an-apex-domain/ https://help.github.com/articles/troubleshooting-custom-domains/ https://help.github.com/articles/custom-domain-redirects-for-github-pages-sites/ 首先我们要一个 CNAME 文件（文件名叫 CNAME，没有文件后缀的），把该文件放在 E:\\git_work_space\\hexo\\source 目录下，以后一些需要放在根目录的资源文件都可以放这里。如果你找不到这样的文件可以到我的项目上下载：https://github.com/jibaole/jibaole.github.io CNAME 上的内容需要写你具体要绑定的域名信息，比如我是：www.jibaole.top，： 接着我们需要到阿里云上设置域名解析：https://www.aliyun.com/ 提高访问速度：默认记录值(国内)：jibaole.coding.me.另一个记录值(海外)：jibaole.github.io. 设置好之后，等过几分钟域名解析好之后，我们访问：http://www.jibao.top，效果如下： 2016-08-19 更新：Github 提示，建议我们使用 CNAME 方式来指向，别用 IP，所以建议你这样配置，还是以我的为例： 主机记录：code 记录类型：CNAME 记录值：jibaole.github.io.（后面的这个点别忘记了） 还有，要记得把 CNAME 那个文件再 deploy 到 Github 哦，不然还是访问不了的。 整合 IntelliJ IDEA 提高效率 为了提交写作效率，我个人建议使用 IntelliJ IDEA 作为 Markdown 编辑工具 IntelliJ IDEA 有各种各样的快捷键支持你的操作 IntelliJ IDEA 可以快速地全文检索项目所有的文件 对 JavaScript、CSS、HTML 等常见语言的良好支持，方便你修改你的主题 如果你还不会使用 IntelliJ IDEA 或是 JetBrains 家其他产品，你可以看下我写一整套教程：http://wiki.jikexueyuan.com/project/intellij-idea-tutorial/ 现在我们用 IntelliJ IDEA 打开我们本地目录：E:\\git_work_space\\hexo，打开后效果如下图： 由于 IntelliJ IDEA 在 Windows 下的默认终端是 cmd 不好用，我们现在需要重新修改下 IntelliJ IDEA 的终端工具，把它指向我们习惯的 Git Bash，这样方便操作，如下图 gif 演示。 如 gif 演示，我们可以 IntelliJ IDEA 里面安心写文章、做发布等操作。 为了更稳定地使用 IntelliJ IDEA，在不修改主题的情况下，我们还需要这样做： hexo 新文章内容的开头需要这样定义： categories：表示文章所属分类 tags：表示文章所属标签 123456---title: 这是文章标题date: 2016-02-28 17:58:27categories: [Hexo,IntelliJ IDEA]tags: [Hexo,IntelliJ IDEA,Git,Github,Node.js]--- 结束语","categories":[{"name":"Hexo","slug":"hexo","permalink":"http://www.jibaole.top/categories/hexo/"},{"name":"IntelliJ IDEA","slug":"hexo/intellij-idea","permalink":"http://www.jibaole.top/categories/hexo/intellij-idea/"},{"name":"Git","slug":"hexo/intellij-idea/git","permalink":"http://www.jibaole.top/categories/hexo/intellij-idea/git/"}],"tags":[{"name":"Hexo","slug":"hexo","permalink":"http://www.jibaole.top/tags/hexo/"},{"name":"Git","slug":"git","permalink":"http://www.jibaole.top/tags/git/"},{"name":"GitHub","slug":"github","permalink":"http://www.jibaole.top/tags/github/"},{"name":"Coding","slug":"coding","permalink":"http://www.jibaole.top/tags/coding/"},{"name":"Intellij Idea","slug":"intellij-idea","permalink":"http://www.jibaole.top/tags/intellij-idea/"}]},{"title":"python技术总结","slug":"python技术总结","date":"2016-11-27T02:14:53.000Z","updated":"2018-06-28T07:20:42.784Z","comments":true,"path":"2016/11/27/python技术总结/","link":"","permalink":"http://www.jibaole.top/2016/11/27/python技术总结/","excerpt":"不知觉python总结都有四十页了，虽然@@可能很多都是基础性的，仍然有成就感。和之前一样，仍然全部贴出来，而不是把新的贴出来，请谅解。这次新增的部分包括c扩展，排序，ftp，源码安全，性能，代码检查等。","text":"不知觉python总结都有四十页了，虽然@@可能很多都是基础性的，仍然有成就感。和之前一样，仍然全部贴出来，而不是把新的贴出来，请谅解。这次新增的部分包括c扩展，排序，ftp，源码安全，性能，代码检查等。 字符串的使用12345678910111213141516171819202122232425262728293031323334353637383940411、 Python的字符串是不可以改变的。但是你可以操作字符串以形成新的字符串。2、 字符串中删除一个字串。没有直接提供这个方法，但是replace可以实现：\"abc def\".replace(\" \", \"\")同样的功能还有一个方法：translate。它的原有作用是将字符串中的某个字符替换为另外一个字符，注意，不是字符串。它的第一个参数是一个转换表。第二个参数是要删除的字符串。我们可以利用第二个参数del，实现这个功能。同时，第一个参数设置为None。translate可能更高效一点。另外，它的第二个参数可以使一个字符串，含有多个字符，这样就会删除多个。注意：translate方法不会对这个字符串操作，而是返回一个新的字符串。3、 strip方法：去除字符串两侧的空格，返回新的字符串。这个功能非常有用。4、 str中有一个函数，format，非常强大，有时间一定要看一下。5、 endswitch：检查字符串是否已某字符串结尾。startswith：检查是否已某字符串开头。6、 partition：它将字符串按指定的字符串分为三个部分，返回一个元组。第一个是指定字符串前面内容，第二个是指定字符串，第三个是指定字符串后面的内容。用于字符串解析非常好用。7、 split：将字符串按照某指定字符串分割成多个子字符串，返回一个分割后的列表。8、 join：将一个字符串列表中的各个字符串连接起来，中间插入指定的字符串。9、 find的返回值不是false和true，所以不可以直接用于if判断。需要判断if s.find(‘’) &gt;= 0:10、 基于字典的格式化：a) sh = '''b) python -m compileall -fl ../src;c) python -m compileall -fl ../src/micbase;d) mkdir %(packname)s;e) mdkir %(packname)s;f) ''' % &#123;'packname':sys.argv[1], &#125;g) print(sh) 字符串函数:1函数的作用域：函数中定义一个变量，如果和全局变量重名，则全局变量名称就会被覆盖，也就是，这里对这个变量的更改，不会更改全局变量。但是，如果直接使用的话，是会使用全局变量的。同时，如果想要修改全局变量，需要制定是全局变量：global a 字符串拼接123 关于函数的入参判断：如果如此为空，可能会发生异常。当异常发生后，可能会出现一种情况，一个事情做到了一半，就没有在进行下去，可能会造成内存泄露。这个问题如何解决？按照C的方式，每个入参都做判断是可以解决的，但是这样太麻烦了。而且看很多开源代码页没有这样来做。是不是有更好的方法？换一种思路，在调用之前确保不为空。在看看开源的代码是怎么做的。特别是openstack。字符串拼接。。。字符串拼接。。。字符串拼接。。。字符串拼接。。。 正则表达式：1234567 为什么要学习正则：主要是为了处理字符串更加方便，特别是为后面进行代码生成做储备。match是匹配字符串的开头是否匹配，而search是查看字符串任意起始位置是否满足。sub可以对字符串中模式匹配的部分进行替换split：可以对字符串进行分割，这里是根据模式分割。","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://www.jibaole.top/tags/python/"}]},{"title":"第一篇博客","slug":"hello-world","date":"2016-11-26T09:18:03.000Z","updated":"2018-06-28T07:20:42.784Z","comments":true,"path":"2016/11/26/hello-world/","link":"","permalink":"http://www.jibaole.top/2016/11/26/hello-world/","excerpt":"简介：Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","text":"简介：Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. 快速了解(一级标题)创建文章(二级标题)1$ hexo new \"My New Post\" More info: Writing 运行hexo1$ 启动hexo server More info: Server 生成静态文件1$ hexo generate More info: Generating 部署到站点1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}